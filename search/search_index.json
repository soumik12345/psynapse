{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Psynapse","text":"<p>A python-native node-based UI editor.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Visual Node Editor: Intuitive drag-and-drop interface for creating node graphs</li> <li>Decoupled Execution: FastAPI backend handles graph execution separately from the UI</li> <li>Built-in Nodes: Includes Object, Add, Subtract, Multiply, Divide, and View nodes</li> <li>Typed Input Nodes: Object node with dynamic widgets for different data types (int, float, string, bool)</li> <li>Error Handling: Comprehensive error handling with persistent toast notifications</li> <li>On-Demand Execution: Execute graphs when you're ready with the Run button</li> <li>Interactive Canvas: Pan, zoom, and navigate your node graph with ease</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>uv pip install -U git+https://github.com/soumik12345/psynapse.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p>1. Start the Backend Server</p> <pre><code>uv run psynapse-backend\n</code></pre> <p>The backend will be available at <code>http://localhost:8000</code>. You can also use:</p> <p>2. Launch the Editor</p> <p>In another terminal:</p> <pre><code>uv run psynapse\n</code></pre>"},{"location":"#creating-a-node-graph","title":"Creating a Node Graph","text":"<ol> <li>Adding Nodes: </li> <li>Use the <code>Nodes</code> menu to add nodes</li> <li> <p>Right-click on the canvas for a context menu</p> </li> <li> <p>Connecting Nodes:</p> </li> <li>Click and drag from an output socket (right side of node)</li> <li>Release on an input socket (left side of another node)</li> <li> <p>Connections are shown as green bezier curves</p> </li> <li> <p>Moving Nodes:</p> </li> <li>Click and drag nodes to reposition them</li> <li> <p>Connections update automatically</p> </li> <li> <p>Executing the Graph:</p> </li> <li>Click the \"\u25b6 Run Graph\" button at the top of the editor</li> <li>The graph will be sent to the backend for execution</li> <li> <p>Results will appear in View nodes</p> </li> <li> <p>Viewing Results:</p> </li> <li>Add View nodes to display computation results</li> <li> <p>Results update when you run the graph</p> </li> <li> <p>Navigation:</p> </li> <li>Pan: Right-click and drag</li> <li>Zoom: Mouse wheel</li> <li> <p>Reset Zoom: <code>Ctrl+0</code></p> </li> <li> <p>Deleting:</p> </li> <li>Select nodes or connections</li> <li>Press <code>Ctrl+D</code> (or <code>Cmd+D</code> on Mac)</li> </ol>"},{"location":"#available-nodes","title":"Available Nodes","text":""},{"location":"#input-nodes","title":"Input Nodes","text":"<ul> <li>Object Node: Creates and outputs typed values with dynamic input widgets</li> <li>Output type: Any (adapts to selected type)</li> <li>Features:<ul> <li>Type Selector: Dropdown to choose data type (Integer, Float, String, Boolean)</li> <li>Dynamic Widgets:</li> <li>Integer: Spinbox with up/down arrows (range: -999999 to 999999)</li> <li>Float: Decimal spinbox with up/down arrows and 4 decimal places</li> <li>String: Text input field</li> <li>Boolean: Checkbox</li> <li>Widget automatically changes when type is switched</li> <li>Perfect for providing constant values to your node graph</li> </ul> </li> </ul>"},{"location":"#math-nodes","title":"Math Nodes","text":"<ul> <li>Add Node: Adds two numbers (A + B)</li> <li>Input types: Float, Float</li> <li>Includes input fields for direct value entry</li> <li>Subtract Node: Subtracts two numbers (A - B)</li> <li>Input types: Float, Float</li> <li>Includes input fields for direct value entry</li> <li>Multiply Node: Multiplies two numbers (A \u00d7 B)</li> <li>Input types: Float, Float</li> <li>Includes input fields for direct value entry</li> <li>Divide Node: Divides two numbers (A \u00f7 B)</li> <li>Input types: Float, Float</li> <li>Includes input fields for direct value entry</li> <li>Demonstrates error handling with division by zero</li> </ul>"},{"location":"#display-nodes","title":"Display Nodes","text":"<ul> <li>View Node: Displays the input value in the node</li> <li>Input type: Any (accepts any data type)</li> </ul>"},{"location":"#available-socket-types","title":"Available Socket Types","text":"<ul> <li><code>SocketDataType.INT</code>: Integer values with input field</li> <li><code>SocketDataType.FLOAT</code>: Floating point values with input field</li> <li><code>SocketDataType.STRING</code>: Text values with input field</li> <li><code>SocketDataType.BOOL</code>: Boolean values</li> <li><code>SocketDataType.ANY</code>: Any type (no input field, must be connected)</li> </ul>"},{"location":"#input-fields","title":"Input Fields","text":"<p>When you use <code>INT</code>, <code>FLOAT</code>, or <code>STRING</code> types for input sockets: - An input field automatically appears next to the socket - Users can type values directly into the node - The input field is hidden when a connection is made - The input field reappears when the connection is removed - Values are automatically validated and converted to the correct type</p>"},{"location":"#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>Ctrl+N</code> (or <code>Cmd+N</code> on Mac): New scene</li> <li><code>Ctrl+Q</code> (or <code>Cmd+Q</code> on Mac): Quit application</li> <li><code>Ctrl++</code> (or <code>Cmd++</code> on Mac): Zoom in</li> <li><code>Ctrl+-</code> (or <code>Cmd+-</code> on Mac): Zoom out</li> <li><code>Ctrl+0</code> (or <code>Cmd+0</code> on Mac): Reset zoom</li> <li><code>Ctrl+D</code> (or <code>Cmd+D</code> on Mac): Delete selected items</li> </ul>"},{"location":"#mouse-controls","title":"Mouse Controls","text":"<ul> <li>Left Click: Select items</li> <li>Left Drag (on node): Move node</li> <li>Left Drag (on socket): Create connection</li> <li>Right Drag: Pan canvas</li> <li>Mouse Wheel: Zoom in/out</li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Inspired by Nodezator, a powerful node editor for Python.</p>"},{"location":"implementation-details/architecture/","title":"Psynapse Architecture","text":""},{"location":"implementation-details/architecture/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Frontend (PySide6)                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   Editor     \u2502   \u2502  Node View   \u2502   \u2502  Library     \u2502     \u2502\n\u2502  \u2502              \u2502\u2500\u2500\u2500\u2502              \u2502   \u2502  Panel       \u2502     \u2502\n\u2502  \u2502  - Run Btn   \u2502   \u2502  - Canvas    \u2502   \u2502              \u2502     \u2502\n\u2502  \u2502  - Status    \u2502   \u2502  - Sockets   \u2502   \u2502  - Drag Node \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (1) User clicks \"Run\"                             \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502         Graph Serializer                     \u2502           \u2502\n\u2502  \u2502  - Converts UI nodes to JSON                 \u2502           \u2502\n\u2502  \u2502  - Maps node types                           \u2502           \u2502\n\u2502  \u2502  - Serializes edges                          \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (2) Serialized graph JSON                         \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502         Backend Client                       \u2502           \u2502\n\u2502  \u2502  - HTTP communication                        \u2502           \u2502\n\u2502  \u2502  - Health checks                             \u2502           \u2502\n\u2502  \u2502  - Error handling                            \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502 (3) POST /execute\n          \u2502\n          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Backend (FastAPI)                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502              FastAPI Server                  \u2502           \u2502\n\u2502  \u2502                                              \u2502           \u2502\n\u2502  \u2502  GET  /nodes     \u2192 Node Schemas              \u2502           \u2502\n\u2502  \u2502  POST /execute   \u2192 Graph Execution           \u2502           \u2502\n\u2502  \u2502  GET  /health    \u2192 Health Check              \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (4) Receive graph                                 \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502           Graph Executor                     \u2502           \u2502\n\u2502  \u2502  - Parse nodes and edges                     \u2502           \u2502\n\u2502  \u2502  - Resolve dependencies                      \u2502           \u2502\n\u2502  \u2502  - Execute operations                        \u2502           \u2502\n\u2502  \u2502  - Cache results                             \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (5) Compute results                               \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502           Node Operations                    \u2502           \u2502\n\u2502  \u2502  - Add, Subtract, Multiply, Divide           \u2502           \u2502\n\u2502  \u2502  - Type checking                             \u2502           \u2502\n\u2502  \u2502  - Error handling                            \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n          \u2502 (6) Return results JSON\n          \u2502     { \"results\": { \"node_1\": {\"value\": 8.0} } }\n          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Frontend (PySide6)                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (7) Receive results                               \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502         Result Handler                       \u2502           \u2502\n\u2502  \u2502  - Map results to ViewNodes                  \u2502           \u2502\n\u2502  \u2502  - Update displays                           \u2502           \u2502\n\u2502  \u2502  - Show errors                               \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502         \u2502                                                   \u2502\n\u2502         \u2502 (8) Update UI                                     \u2502\n\u2502         \u25bc                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                           \u2502\n\u2502  \u2502  ViewNodes   \u2502                                           \u2502\n\u2502  \u2502  show values \u2502                                           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                           \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"implementation-details/architecture/#component-responsibilities","title":"Component Responsibilities","text":""},{"location":"implementation-details/architecture/#frontend-pyside6","title":"Frontend (PySide6)","text":""},{"location":"implementation-details/architecture/#editor-editorpy","title":"Editor (<code>editor.py</code>)","text":"<ul> <li>Main application window</li> <li>Manages node library and canvas</li> <li>Coordinates execution via Run button</li> <li>Displays status and errors</li> </ul>"},{"location":"implementation-details/architecture/#node-view-viewpy","title":"Node View (<code>view.py</code>)","text":"<ul> <li>Interactive canvas for node graph</li> <li>Handles pan, zoom, and connections</li> <li>Drag-and-drop support</li> </ul>"},{"location":"implementation-details/architecture/#serializer-serializerpy","title":"Serializer (<code>serializer.py</code>)","text":"<ul> <li>Converts UI graph to JSON</li> <li>Maps node classes to backend types</li> <li>Serializes sockets and connections</li> </ul>"},{"location":"implementation-details/architecture/#backend-client-backend_clientpy","title":"Backend Client (<code>backend_client.py</code>)","text":"<ul> <li>HTTP client for FastAPI backend</li> <li>Async/sync method wrappers</li> <li>Connection health checks</li> </ul>"},{"location":"implementation-details/architecture/#backend-fastapi","title":"Backend (FastAPI)","text":""},{"location":"implementation-details/architecture/#server-serverpy","title":"Server (<code>server.py</code>)","text":"<ul> <li>REST API endpoints</li> <li>CORS configuration</li> <li>Request validation</li> </ul>"},{"location":"implementation-details/architecture/#node-schemas-node_schemaspy","title":"Node Schemas (<code>node_schemas.py</code>)","text":"<ul> <li>Defines available node types</li> <li>Specifies parameters and returns</li> <li>Type information</li> </ul>"},{"location":"implementation-details/architecture/#executor-executorpy","title":"Executor (<code>executor.py</code>)","text":"<ul> <li>Graph execution engine</li> <li>Dependency resolution</li> <li>Result caching</li> <li>Error handling</li> </ul>"},{"location":"implementation-details/architecture/#data-flow","title":"Data Flow","text":""},{"location":"implementation-details/architecture/#graph-serialization","title":"Graph Serialization","text":"<p>Input (UI Nodes): <pre><code>nodes = [AddNode(), ViewNode()]\n# AddNode has inputs A=5.0, B=3.0\n# ViewNode connected to AddNode output\n</code></pre></p> <p>Output (JSON): <pre><code>{\n  \"nodes\": [\n    {\n      \"id\": \"node_0\",\n      \"type\": \"add\",\n      \"input_sockets\": [\n        {\"id\": \"node_0_input_0\", \"name\": \"a\", \"value\": 5.0},\n        {\"id\": \"node_0_input_1\", \"name\": \"b\", \"value\": 3.0}\n      ],\n      \"output_sockets\": [\n        {\"id\": \"node_0_output_0\", \"name\": \"result\"}\n      ]\n    },\n    {\n      \"id\": \"node_1\",\n      \"type\": \"view\",\n      \"input_sockets\": [\n        {\"id\": \"node_1_input_0\", \"name\": \"value\", \"value\": null}\n      ],\n      \"output_sockets\": []\n    }\n  ],\n  \"edges\": [\n    {\n      \"start_socket\": \"node_0_output_0\",\n      \"end_socket\": \"node_1_input_0\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"implementation-details/architecture/#execution-results","title":"Execution Results","text":"<p>Backend Response: <pre><code>{\n  \"results\": {\n    \"node_1\": {\n      \"value\": 8.0,\n      \"error\": null\n    }\n  }\n}\n</code></pre></p> <p>Frontend Processing:</p> <ul> <li> <p>Maps <code>node_1</code> \u2192 second ViewNode in graph</p> </li> <li> <p>Updates ViewNode display to show <code>8.0</code></p> </li> <li> <p>Clears any error state</p> </li> </ul>"},{"location":"implementation-details/backend/","title":"Psynapse Backend","text":"<p>The Psynapse backend is a FastAPI server that handles node graph execution. This decouples the compute from the UI, allowing for more scalable and testable node execution.</p>"},{"location":"implementation-details/backend/#architecture","title":"Architecture","text":""},{"location":"implementation-details/backend/#components","title":"Components","text":"<ol> <li>FastAPI Server (<code>psynapse/backend/server.py</code>)</li> <li>Provides REST API endpoints for node operations</li> <li> <p>Handles graph execution requests</p> </li> <li> <p>Node Schemas (<code>psynapse/backend/node_schemas.py</code>)</p> </li> <li>Defines the schema for available nodes</li> <li> <p>Specifies parameters and return types for each node</p> </li> <li> <p>Graph Executor (<code>psynapse/backend/executor.py</code>)</p> </li> <li>Executes node graphs</li> <li>Manages node dependencies and caching</li> <li>Returns results for ViewNodes</li> </ol>"},{"location":"implementation-details/backend/#frontend-integration","title":"Frontend Integration","text":"<ol> <li>Graph Serializer (<code>psynapse/core/serializer.py</code>)</li> <li>Converts the UI node graph to a JSON format</li> <li> <p>Serializes nodes and edges for backend consumption</p> </li> <li> <p>Backend Client (<code>psynapse/editor/backend_client.py</code>)</p> </li> <li>HTTP client for communicating with the backend</li> <li>Provides sync wrappers for async operations</li> </ol>"},{"location":"implementation-details/backend/#api-endpoints","title":"API Endpoints","text":""},{"location":"implementation-details/backend/#get-nodes","title":"GET <code>/nodes</code>","text":"<p>Returns the schema of all available nodes.</p> <p>Response: <pre><code>{\n  \"nodes\": [\n    {\n      \"name\": \"add\",\n      \"params\": [\n        {\"name\": \"a\", \"type\": \"float\"},\n        {\"name\": \"b\", \"type\": \"float\"}\n      ],\n      \"returns\": [\n        {\"name\": \"result\", \"type\": \"float\"}\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"implementation-details/backend/#post-execute","title":"POST <code>/execute</code>","text":"<p>Executes a node graph and returns results.</p> <p>Request: <pre><code>{\n  \"nodes\": [\n    {\n      \"id\": \"node_0\",\n      \"type\": \"add\",\n      \"input_sockets\": [\n        {\"id\": \"node_0_input_0\", \"name\": \"a\", \"value\": 5.0},\n        {\"id\": \"node_0_input_1\", \"name\": \"b\", \"value\": 3.0}\n      ],\n      \"output_sockets\": [\n        {\"id\": \"node_0_output_0\", \"name\": \"result\"}\n      ]\n    },\n    {\n      \"id\": \"node_1\",\n      \"type\": \"view\",\n      \"input_sockets\": [\n        {\"id\": \"node_1_input_0\", \"name\": \"value\", \"value\": null}\n      ],\n      \"output_sockets\": []\n    }\n  ],\n  \"edges\": [\n    {\n      \"start_socket\": \"node_0_output_0\",\n      \"end_socket\": \"node_1_input_0\"\n    }\n  ]\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"results\": {\n    \"node_1\": {\n      \"value\": 8.0,\n      \"error\": null\n    }\n  }\n}\n</code></pre></p>"},{"location":"implementation-details/backend/#get-health","title":"GET <code>/health</code>","text":"<p>Health check endpoint.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"implementation-details/backend/#running-the-backend","title":"Running the Backend","text":""},{"location":"implementation-details/backend/#method-1-using-the-helper-script","title":"Method 1: Using the helper script","text":"<pre><code>uv run python start_backend.py\n</code></pre>"},{"location":"implementation-details/backend/#method-2-using-uvicorn-directly","title":"Method 2: Using uvicorn directly","text":"<pre><code>uvicorn psynapse.backend.server:app --reload\n</code></pre>"},{"location":"implementation-details/backend/#method-3-using-uvicorn-with-custom-hostport","title":"Method 3: Using uvicorn with custom host/port","text":"<pre><code>uvicorn psynapse.backend.server:app --reload --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"implementation-details/backend/#usage-workflow","title":"Usage Workflow","text":"<ol> <li> <p>Start the backend server <pre><code>uv run python start_backend.py\n</code></pre></p> </li> <li> <p>Launch the Psynapse editor <pre><code>uv run psynapse\n</code></pre></p> </li> <li> <p>Build your node graph</p> </li> <li>Drag nodes from the library panel</li> <li> <p>Connect nodes by dragging from output to input sockets</p> </li> <li> <p>Execute the graph</p> </li> <li>Click the \"\u25b6 Run Graph\" button</li> <li>The frontend will serialize the graph and send it to the backend</li> <li>Results will be displayed in ViewNodes</li> </ol>"},{"location":"implementation-details/backend/#development","title":"Development","text":""},{"location":"implementation-details/backend/#adding-new-node-types","title":"Adding New Node Types","text":"<p>To add a new node type:</p> <ol> <li> <p>Add the node schema in <code>psynapse/backend/node_schemas.py</code>:    <pre><code>{\n    \"name\": \"new_node\",\n    \"params\": [\n        {\"name\": \"param1\", \"type\": \"float\"},\n    ],\n    \"returns\": [\n        {\"name\": \"result\", \"type\": \"float\"},\n    ],\n}\n</code></pre></p> </li> <li> <p>Implement the execution logic in <code>psynapse/backend/executor.py</code>:    <pre><code>elif node_type == \"new_node\":\n    param1 = float(inputs.get(\"param1\", 0.0))\n    return some_computation(param1)\n</code></pre></p> </li> <li> <p>Create the frontend node class in <code>psynapse/nodes/</code>:    <pre><code>class NewNode(Node):\n    def __init__(self):\n        super().__init__(\n            title=\"New Node\",\n            inputs=[(\"Param1\", SocketDataType.FLOAT)],\n            outputs=[(\"Result\", SocketDataType.FLOAT)],\n        )\n</code></pre></p> </li> <li> <p>Register the node in the serializer mapping (<code>psynapse/core/serializer.py</code>):    <pre><code>NODE_TYPE_MAP = {\n    NewNode: \"new_node\",\n    # ... other nodes\n}\n</code></pre></p> </li> </ol>"},{"location":"implementation-details/backend/#testing","title":"Testing","text":"<p>Test the backend endpoints using curl or any HTTP client:</p> <pre><code># Health check\ncurl http://localhost:8000/health\n\n# Get node schemas\ncurl http://localhost:8000/nodes\n\n# Execute a graph\ncurl -X POST http://localhost:8000/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nodes\": [...], \"edges\": [...]}'\n</code></pre>"}]}